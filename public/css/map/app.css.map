{"version":3,"sources":["app.scss","app.css","topbar.scss","../../../public/bower_components/sass-material-colors/sass/_sass-material-colors-function.scss","_pagination.scss","components/_lfx-player.scss","lfxui/_position.scss"],"names":[],"mappings":"AAKA;;;EAGE,uBAAsB,EAAA;;AAGxB;EACE,UAAS,EAAA;;AAGX;EACE,cAAa,EAAA;;ACLf;;;;;;;;;GASG;AChBH;EACE,aAAY,EAAA;EACZ;IACE,YAAW,EAAA;EAGb;IACE,aAAY,EAAA;EAGd;IACE,oBAAY;IAAZ,qBAAY;IAAZ,qBAAY;IAAZ,aAAY;IACZ,aAAY;IACZ,qBAAa;IAAb,sBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,0BAAmB;IAAnB,4BAAmB;IAAnB,uBAAmB;IAAnB,oBAAmB;IACnB,mBAAkB,EAAA;EAGpB;IACE,0BAAiB;IAAjB,+BAAiB;IAAjB,kBAAiB;IACjB,yBAAuB;IAAvB,gCAAuB;IAAvB,sBAAuB;IAAvB,wBAAuB,EAAA;EAGzB;IACE,oBAAY;IAAZ,qBAAY;IAAZ,qBAAY;IAAZ,aAAY,EAAA;EAGd;IACE,0BAAiB;IAAjB,+BAAiB;IAAjB,kBAAiB;IACjB,+BAAoD;IACpD,sBAAyB;IAAzB,kCAAyB;IAAzB,mBAAyB;IAAzB,0BAAyB,EAAA;EAG3B;IACE,gBAAe;IACf,eAAc;IACd,iCAAgD,EAAA;EAIhD;IACE,iCAA+C,EAAA;IAC/C;MACE,UAAS;MACT,aAAY;MACZ,aAAY,EAAA;MACZ;QACE,cAAa,EAAA;IAGjB;MACE,UAAS;MACT,8BAA6B;MAC7B,eAAc;MACd,aAAY,EAAA;MACZ;QACE,eChD8D,EAAA;EDsDtE;IACE,aAAY;IACZ,kBAAiB;IACjB,eAAc;IACd,kBAAiB;IACjB,mBAAkB;IAClB,WAAU;IACV,OAAM;IACN,YAAW;IACX,UAAS;IACT,aAAY,EAAA;EAGd;IACE,oBAAmB,EAAA;IACnB;MACE,UAAS;MACT,oBAAmB,EAAA;MAEnB;QACE,YAAW;QACX,aAAY;QACZ,WAAU,EAAA;QACV;UACE,YAAW;UACX,aAAY,EAAA;IAIlB;MACE,YAAW;MACX,WAAU;MACV,mBAAkB;MAClB,aAAY;MACZ,eCxFkE,EAAA;;ACVpE;EACE,eAAc;EACd,YAAW;EACX,aAAY,EAAA;;ACFhB;EACE,mBAAkB,EAAA;AAIhB;EACE,qBAAa;EAAb,sBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,0BAAmB;EAAnB,4BAAmB;EAAnB,uBAAmB;EAAnB,oBAAmB;EACnB,qCAAoC;EACpC,mBAAkB;EC2BxB,mBA6B0B;EAjBlB,YAF2B;EAE3B,UAF2B;EDnC7B,oCAA2B;EAA3B,gCAA2B;EAA3B,4BAA2B;EAC3B,WAAU,EAAA;AAGZ;ECqBJ,mBA6B0B;EAjBlB,aAF2B;EAE3B,QAF2B;ED7B7B,YAAW;EACX,WAAU,EAAA;EACV;IACE,YAAW,EAAA","file":"app.css","sourcesContent":["// @import \"node_modules/bootstrap-sass/assets/stylesheets/bootstrap\";\n@import \"../../../public/bower_components/scss-lfx-nipponcolor/stylesheets/nipponcolor\";\n\n@import \"config/color\";\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@import \"topbar\";\n@import \"pagination\";\n@import \"components/lfx-player\";","*,\n*::before,\n*::after {\n  box-sizing: border-box; }\n\nbody {\n  margin: 0; }\n\n.hidden {\n  display: none; }\n\n/**\n * Retrieves a color value from the $material-colors Sass map\n * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/\n *\n * @function\n * @param {string} color-name             - quoted, lower-case, dasherized color\n *                                          name (e.g. 'pink', 'amber')\n * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.\n *                                          '200', 'a100')\n */\ntop-bar {\n  height: 95px; }\n  top-bar > .row {\n    width: 100%; }\n  top-bar .row {\n    height: 100%; }\n  top-bar .col-xs {\n    flex-grow: 0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    position: relative; }\n  top-bar .col-xs:nth-of-type(1) {\n    flex-basis: 300px;\n    justify-content: center; }\n  top-bar .col-xs:nth-of-type(2) {\n    flex-grow: 1; }\n  top-bar .col-xs:nth-of-type(3) {\n    flex-basis: 300px;\n    border-left: 1px solid #eeeeee;\n    justify-content: flex-end; }\n  top-bar .logo-con {\n    font-size: 30px;\n    color: #ffffff;\n    text-shadow: 1px 1px 1px #e87a90; }\n  top-bar .search-form .search-group {\n    border-bottom: 1px solid #9e9e9e; }\n    top-bar .search-form .search-group input {\n      border: 0;\n      width: 425px;\n      height: 30px; }\n      top-bar .search-form .search-group input:focus {\n        outline: none; }\n    top-bar .search-form .search-group button {\n      border: 0;\n      background-color: transparent;\n      color: #ffffff;\n      height: 30px; }\n      top-bar .search-form .search-group button iron-icon {\n        color: #9e9e9e; }\n  top-bar .upload-video-button {\n    height: 35px;\n    line-height: 35px;\n    padding-top: 0;\n    padding-bottom: 0;\n    position: absolute;\n    left: auto;\n    top: 0;\n    right: 50px;\n    bottom: 0;\n    margin: auto; }\n  top-bar .member {\n    padding-right: 10px; }\n    top-bar .member__action {\n      margin: 0;\n      padding-right: 10px; }\n      top-bar .member__action paper-button {\n        width: 26px;\n        min-width: 0;\n        padding: 0; }\n        top-bar .member__action paper-button iron-icon {\n          width: 20px;\n          height: 20px; }\n    top-bar .member__toggle-nav {\n      width: 35px;\n      padding: 0;\n      margin-right: 20px;\n      min-width: 0;\n      color: #9e9e9e; }\n\n.paignation paper-button a {\n  display: block;\n  width: 100%;\n  height: 100%; }\n\nlfx-player > .lfx-player {\n  position: relative; }\n.lfx-player__controlbar {\n  display: flex;\n  align-items: center;\n  background: rgba(233, 233, 233, 0.8);\n  border-radius: 5px;\n  position: absolute;\n  bottom: 15%;\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 1; }\n.lfx-player__progress {\n  position: absolute;\n  bottom: 15px;\n  left: 0;\n  width: 100%;\n  z-index: 1; }\n  .lfx-player__progress paper-progress {\n    width: 100%; }\n\n\n","@import \"config/color\";\n@import \"utils/function\";\n@import \"../../../public/bower_components/sass-material-colors/sass/sass-material-colors\";\n\ntop-bar {\n  height: 95px;\n  > .row {\n    width: 100%;\n  }\n\n  .row {\n    height: 100%;\n  }\n\n  .col-xs {\n    flex-grow: 0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    position: relative;\n  }\n\n  .col-xs:nth-of-type(1) {\n    flex-basis: 300px;\n    justify-content: center;\n  }\n\n  .col-xs:nth-of-type(2) {\n    flex-grow: 1;\n  }\n\n  .col-xs:nth-of-type(3) {\n    flex-basis: 300px;\n    border-left: 1px solid material-color(\"grey\", \"200\");\n    justify-content: flex-end;\n  }\n\n  .logo-con {\n    font-size: 30px;\n    color: #ffffff;\n    text-shadow: 1px 1px 1px zhilizhili-color('red');\n  }\n\n  .search-form {\n    .search-group {\n      border-bottom: 1px solid material-color(\"grey\");\n      input {\n        border: 0;\n        width: 425px;\n        height: 30px;\n        &:focus {\n          outline: none;\n        }\n      }\n      button {\n        border: 0;\n        background-color: transparent;\n        color: #ffffff;\n        height: 30px;\n        iron-icon {\n          color: material-color(\"grey\");\n        }\n      }\n    }\n  }\n\n  .upload-video-button {\n    height: 35px;\n    line-height: 35px;\n    padding-top: 0;\n    padding-bottom: 0;\n    position: absolute;\n    left: auto;\n    top: 0;\n    right: 50px;\n    bottom: 0;\n    margin: auto;\n  }\n\n  .member {\n    padding-right: 10px;\n    &__action {\n      margin: 0;\n      padding-right: 10px;\n\n      paper-button {\n        width: 26px;\n        min-width: 0;\n        padding: 0;\n        iron-icon {\n          width: 20px;\n          height: 20px;\n        }\n      }\n    }\n    &__toggle-nav {\n      width: 35px;\n      padding: 0;\n      margin-right: 20px;\n      min-width: 0;\n      color: material-color(\"grey\");\n    }\n  }\n}","@import 'sass-material-colors-map';\n/**\n * Retrieves a color value from the $material-colors Sass map\n * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/\n *\n * @function\n * @param {string} color-name             - quoted, lower-case, dasherized color\n *                                          name (e.g. 'pink', 'amber')\n * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.\n *                                          '200', 'a100')\n */\n@function material-color($color-name, $color-variant: '500') {\n  $color: map-get(map-get($material-colors, $color-name),$color-variant);\n  @if $color {\n    @return $color;\n  } @else {\n    // Libsass still doesn't seem to support @error\n    @warn \"=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the $material-colors map.\";\n  }\n}\n",".paignation {\n  paper-button {\n    a {\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n  }\n}","@import \"../lfxui/position\";\n\nlfx-player {\n  > .lfx-player {\n    position: relative;\n  }\n  @at-root {\n    .lfx-player {\n      &__controlbar {\n        display: flex;\n        align-items: center;\n        background: rgba(233, 233, 233, 0.8);\n        border-radius: 5px;\n        @include position-absolute(bottom 15% left 50%);\n        transform: translateX(-50%);\n        z-index: 1;\n      }\n\n      &__progress {\n        @include position-absolute(bottom 15px left 0);\n        width: 100%;\n        z-index: 1;\n        paper-progress {\n          width: 100%;\n        }\n      }\n    }\n  }\n}","// Helper mixin for offset positioning\n// About: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/\n// ---\n// Here is an improved version adding some extra features\n// ---\n// @param [string] $position: position\n// @param [list] $args (()): offsets list\n// ---\n// Explanations\n// 1. Output position\n// 2. If `$args` is not empty\n// 3. Loop other the 4 popular offsets (`$offsets`)\n// 4. Check if the current one exists in `$args`\n// 5. If it is found in `$args`\n// 6. And if it is at last position\n// 7. Set it to 0\n// 8. Else if it is found at any other index\n// 9. Store the next value from `$args`\n// 10. If it is a valid length\n// 11. Set the offset to this value\n// 12. Else if it is another offset\n// 13. Set the offset to 0\n// 14. Else\n// 15. Warn the user\n// ---\n\n// Function checking if $value is a valid length\n// ---\n// @param [literal] $value: value to test\n// ---\n// @return [bool]\n\n@function is-valid-length($value) {\n  @return (type-of($value) == \"number\" and not unitless($value))\n       or (index(auto initial inherit 0, $value) != false);\n}\n\n@mixin position($position, $args: ()) {\n  $offsets: top right bottom left;\n  position: $position;                                               // 1\n\n  @each $offset in $offsets {                                        // 3\n    $index: index($args, $offset);                                   // 4\n\n    @if $index {                                                     // 5\n      @if $index == length($args) {                                  // 6\n        #{$offset}: 0;                                               // 7\n      }\n      @else {                                                        // 8\n        $next: nth($args, $index + 1);                               // 9\n        @if is-valid-length($next) {                                 // 10\n          #{$offset}: $next;                                         // 11\n        }\n        @else if index($offsets, $next) {                            // 12\n          #{$offset}: 0;                                             // 13\n        }\n        @else {                                                      // 14\n          @warn \"Invalid value `#{$next}` for offset `#{$offset}`.\"; // 15\n        }\n      }\n    }\n  }\n}\n\n// Shorthands\n// ---\n\n@mixin position-absolute($args: ()) {\n  @include position(absolute, $args);\n}\n\n@mixin position-fixed($args: ()) {\n  @include position(fixed, $args);\n}\n\n@mixin position-relative($args: ()) {\n  @include position(relative, $args);\n}\n"],"sourceRoot":"/source/"}