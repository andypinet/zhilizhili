{"version":3,"sources":["topbar.css","topbar.scss","../../../public/bower_components/sass-material-colors/sass/_sass-material-colors-function.scss","../../../node_modules/sass-rem/_rem.scss"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AC2CH;EACE,aAAY;EACZ,mBAAkB;EAClB,cAAa;EACb,0BAAyB,EAAA;EAEzB;IACE,YAAW,EAAA;EAGb;IACE,aAAY,EAAA;EAGd;IACE,oBAAY;IAAZ,qBAAY;IAAZ,qBAAY;IAAZ,aAAY;IACZ,aAAY;IACZ,qBAAa;IAAb,sBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,0BAAmB;IAAnB,4BAAmB;IAAnB,uBAAmB;IAAnB,oBAAmB;IACnB,mBAAkB,EAAA;EAGpB;IACE,0BAAiB;IAAjB,+BAAiB;IAAjB,kBAAiB;IACjB,yBAAuB;IAAvB,gCAAuB;IAAvB,sBAAuB;IAAvB,wBAAuB,EAAA;EAGzB;IACE,oBAAY;IAAZ,qBAAY;IAAZ,qBAAY;IAAZ,aAAY,EAAA;EAGd;IACE,0BAAiB;IAAjB,+BAAiB;IAAjB,kBAAiB;IACjB,+BAAoD;IACpD,sBAAyB;IAAzB,kCAAyB;IAAzB,mBAAyB;IAAzB,0BAAyB,EAAA;EAG3B;IACE,gBAAe;IACf,eAAc;IACd,iCAAgD,EAAA;EAIhD;IACE,iCAA+C,EAAA;IAC/C;MACE,UAAS;MACT,aAAY;MACZ,aAAY;MACZ,8BAA6B,EAAA;MAC7B;QACE,cAAa,EAAA;IAGjB;MACE,UAAS;MACT,8BAA6B;MAC7B,eAAc;MACd,aAAY,EAAA;MACZ;QACE,eCrG8D,EAAA;ED2GtE;IACE,aAAY;IACZ,kBAAiB;IACjB,eAAc;IACd,kBAAiB;IACjB,mBAAkB;IAClB,WAAU;IACV,OAAM;IACN,YAAW;IACX,UAAS;IACT,aAAY,EAAA;EAGd;IACE,oBAAmB,EAAA;IACnB;MACE,UAAS;MACT,oBAAmB,EAAA;MAEnB;QACE,YAAW;QACX,aAAY;QACZ,WAAU,EAAA;QACV;UACE,YAAW;UACX,aAAY,EAAA;IAIlB;MACE,YAAW;MACX,WAAU;MACV,mBAAkB;MAClB,aAAY;MACZ,eC7IkE,EAAA;EDiJtE;IACE,aAAY;IACZ,mBAAkB;IAClB,QAAO;IACP,UAAS;IACT,WAAU;IACV,8BAAmD,EAAA;IA7IrD;MACE,YAAW;MACX,UAAS;MACT,iBAAgB;MAChB,0BAAyB;MACzB,0BAAyB;MACzB,2BAA0B,EAAA;MAC1B;QACE,4BAA2B;QAC3B,4BAA2B,EAAA;MAhB7B;QAoBE,kBAAiB;QACjB,eCxBkE;QC6ChE,gBFnBqB;QEsBrB,kBAA0C,EAAA;MFlB9C;QACE,kBAAiB;QACjB,qBAAoB,EAAA;IAGxB;MACE,0BAAyB,EAAA;EAuH3B;IACE,aAAY;IACZ,mBAAkB;IAClB,SAAQ;IACR,UAAS;IACT,WAAU;IACV,8BAAmD;IACnD,0BAAyB,EAAA;IAxJ3B;MACE,YAAW;MACX,UAAS;MACT,iBAAgB;MAChB,0BAAyB;MACzB,0BAAyB;MACzB,2BAA0B,EAAA;MAC1B;QACE,4BAA2B;QAC3B,4BAA2B,EAAA;MAhB7B;QAoBE,kBAAiB;QACjB,eCxBkE;QC6ChE,gBFnBqB;QEsBrB,kBAA0C,EAAA;MFlB9C;QACE,kBAAiB;QACjB,qBAAoB,EAAA;IAGxB;MACE,0BAAyB,EAAA","file":"topbar.css","sourcesContent":["/**\n * Retrieves a color value from the $material-colors Sass map\n * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/\n *\n * @function\n * @param {string} color-name             - quoted, lower-case, dasherized color\n *                                          name (e.g. 'pink', 'amber')\n * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.\n *                                          '200', 'a100')\n */\ntop-bar {\n  height: 95px;\n  position: relative;\n  z-index: 1000;\n  background-color: #ffffff; }\n  top-bar > .row {\n    width: 100%; }\n  top-bar .row {\n    height: 100%; }\n  top-bar .col-xs {\n    flex-grow: 0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    position: relative; }\n  top-bar .col-xs:nth-of-type(1) {\n    flex-basis: 300px;\n    justify-content: center; }\n  top-bar .col-xs:nth-of-type(2) {\n    flex-grow: 1; }\n  top-bar .col-xs:nth-of-type(3) {\n    flex-basis: 300px;\n    border-left: 1px solid #eeeeee;\n    justify-content: flex-end; }\n  top-bar .logo-con {\n    font-size: 30px;\n    color: #ffffff;\n    text-shadow: 1px 1px 1px #e87a90; }\n  top-bar .search-form .search-group {\n    border-bottom: 1px solid #9e9e9e; }\n    top-bar .search-form .search-group input {\n      border: 0;\n      width: 425px;\n      height: 30px;\n      background-color: transparent; }\n      top-bar .search-form .search-group input:focus {\n        outline: none; }\n    top-bar .search-form .search-group button {\n      border: 0;\n      background-color: transparent;\n      color: #ffffff;\n      height: 30px; }\n      top-bar .search-form .search-group button iron-icon {\n        color: #9e9e9e; }\n  top-bar .upload-video-button {\n    height: 35px;\n    line-height: 35px;\n    padding-top: 0;\n    padding-bottom: 0;\n    position: absolute;\n    left: auto;\n    top: 0;\n    right: 50px;\n    bottom: 0;\n    margin: auto; }\n  top-bar .member {\n    padding-right: 10px; }\n    top-bar .member__action {\n      margin: 0;\n      padding-right: 10px; }\n      top-bar .member__action paper-button {\n        width: 26px;\n        min-width: 0;\n        padding: 0; }\n        top-bar .member__action paper-button iron-icon {\n          width: 20px;\n          height: 20px; }\n    top-bar .member__toggle-nav {\n      width: 35px;\n      padding: 0;\n      margin-right: 20px;\n      min-width: 0;\n      color: #9e9e9e; }\n  top-bar .nav-menu {\n    width: 300px;\n    position: absolute;\n    left: 0;\n    top: 95px;\n    z-index: 1;\n    border-top: 1px solid #eeeeee; }\n    top-bar .nav-menu paper-card {\n      width: 100%;\n      border: 0;\n      box-shadow: none;\n      background-color: #f7f8fa;\n      border-top-left-radius: 0;\n      border-top-right-radius: 0; }\n      top-bar .nav-menu paper-card paper-material {\n        border-radius: 0 !important;\n        box-shadow: none !important; }\n      top-bar .nav-menu paper-card .header.paper-card .title-text.paper-card {\n        padding-bottom: 0;\n        color: #f44336;\n        font-size: 16px;\n        font-size: 1.6rem; }\n      top-bar .nav-menu paper-card .card-content {\n        padding-top: 10px;\n        padding-bottom: 10px; }\n    top-bar .nav-menu paper-menu {\n      background-color: #f7f8fa; }\n  top-bar .user-menu {\n    width: 300px;\n    position: absolute;\n    right: 0;\n    top: 95px;\n    z-index: 1;\n    border-top: 1px solid #eeeeee;\n    background-color: #f7f8fa; }\n    top-bar .user-menu paper-card {\n      width: 100%;\n      border: 0;\n      box-shadow: none;\n      background-color: #f7f8fa;\n      border-top-left-radius: 0;\n      border-top-right-radius: 0; }\n      top-bar .user-menu paper-card paper-material {\n        border-radius: 0 !important;\n        box-shadow: none !important; }\n      top-bar .user-menu paper-card .header.paper-card .title-text.paper-card {\n        padding-bottom: 0;\n        color: #f44336;\n        font-size: 16px;\n        font-size: 1.6rem; }\n      top-bar .user-menu paper-card .card-content {\n        padding-top: 10px;\n        padding-bottom: 10px; }\n    top-bar .user-menu paper-menu {\n      background-color: #f7f8fa; }\n\n\n","@import \"config/color\";\n@import \"utils/function\";\n@import \"../../../public/bower_components/sass-material-colors/sass/sass-material-colors\";\n@import \"../../../node_modules/sass-rem/rem\";\n\n@mixin host($component, $sel) {\n  $parse-sels: selector-parse($sel);\n  $parse-sels-length: length($parse-sels);\n  @for $i from 1 through $parse-sels-length {\n    $parse-sel: nth($parse-sels, $i);\n    $parse-sel-node-length: length($parse-sel);\n    $usesel: \"\";\n    @for $m from 1 through $parse-sel-node-length {\n      $usesel: $usesel + nth($parse-sel, $m) + $component + \" \";\n    }\n    #{$usesel} {\n      @content;\n    }\n  }\n}\n\n@mixin nav-content() {\n  paper-card {\n    width: 100%;\n    border: 0;\n    box-shadow: none;\n    background-color: #f7f8fa;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    paper-material {\n      border-radius: 0 !important;\n      box-shadow: none !important;\n    }\n\n    @include host(\".paper-card\", \".header .title-text\") {\n      padding-bottom: 0;\n      color: material-color(\"red\");\n      @include rem((\n              font-size: 16px\n      ));\n    }\n\n    .card-content {\n      padding-top: 10px;\n      padding-bottom: 10px;\n    }\n  }\n  paper-menu {\n    background-color: #f7f8fa;\n  }\n}\n\ntop-bar {\n  height: 95px;\n  position: relative;\n  z-index: 1000;\n  background-color: #ffffff;\n\n  > .row {\n    width: 100%;\n  }\n\n  .row {\n    height: 100%;\n  }\n\n  .col-xs {\n    flex-grow: 0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    position: relative;\n  }\n\n  .col-xs:nth-of-type(1) {\n    flex-basis: 300px;\n    justify-content: center;\n  }\n\n  .col-xs:nth-of-type(2) {\n    flex-grow: 1;\n  }\n\n  .col-xs:nth-of-type(3) {\n    flex-basis: 300px;\n    border-left: 1px solid material-color(\"grey\", \"200\");\n    justify-content: flex-end;\n  }\n\n  .logo-con {\n    font-size: 30px;\n    color: #ffffff;\n    text-shadow: 1px 1px 1px zhilizhili-color('red');\n  }\n\n  .search-form {\n    .search-group {\n      border-bottom: 1px solid material-color(\"grey\");\n      input {\n        border: 0;\n        width: 425px;\n        height: 30px;\n        background-color: transparent;\n        &:focus {\n          outline: none;\n        }\n      }\n      button {\n        border: 0;\n        background-color: transparent;\n        color: #ffffff;\n        height: 30px;\n        iron-icon {\n          color: material-color(\"grey\");\n        }\n      }\n    }\n  }\n\n  .upload-video-button {\n    height: 35px;\n    line-height: 35px;\n    padding-top: 0;\n    padding-bottom: 0;\n    position: absolute;\n    left: auto;\n    top: 0;\n    right: 50px;\n    bottom: 0;\n    margin: auto;\n  }\n\n  .member {\n    padding-right: 10px;\n    &__action {\n      margin: 0;\n      padding-right: 10px;\n\n      paper-button {\n        width: 26px;\n        min-width: 0;\n        padding: 0;\n        iron-icon {\n          width: 20px;\n          height: 20px;\n        }\n      }\n    }\n    &__toggle-nav {\n      width: 35px;\n      padding: 0;\n      margin-right: 20px;\n      min-width: 0;\n      color: material-color(\"grey\");\n    }\n  }\n\n  .nav-menu {\n    width: 300px;\n    position: absolute;\n    left: 0;\n    top: 95px;\n    z-index: 1;\n    border-top: 1px solid material-color(\"grey\", \"200\");\n    @include nav-content();\n  }\n\n  .user-menu {\n    width: 300px;\n    position: absolute;\n    right: 0;\n    top: 95px;\n    z-index: 1;\n    border-top: 1px solid material-color(\"grey\", \"200\");\n    background-color: #f7f8fa;\n    @include nav-content();\n  }\n}","@import 'sass-material-colors-map';\n/**\n * Retrieves a color value from the $material-colors Sass map\n * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/\n *\n * @function\n * @param {string} color-name             - quoted, lower-case, dasherized color\n *                                          name (e.g. 'pink', 'amber')\n * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.\n *                                          '200', 'a100')\n */\n@function material-color($color-name, $color-variant: '500') {\n  $color: map-get(map-get($material-colors, $color-name),$color-variant);\n  @if $color {\n    @return $color;\n  } @else {\n    // Libsass still doesn't seem to support @error\n    @warn \"=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the $material-colors map.\";\n  }\n}\n","$rem-baseline: 10px !default;\n$rem-fallback: true !default;\n$rem-px-only: false !default;\n\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n@function rem-separator($list) {\n  @if function-exists(\"list-separator\") == true {\n    @return list-separator($list);\n  }\n\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\n      $result: append($result, $value / ($rem-baseline / 1rem), $separator);\n    } @else if type-of($value) == \"list\" {\n      $result: append($result, rem-convert($to, $value...), $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == \"map\" {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}