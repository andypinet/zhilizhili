{"version":3,"names":[],"mappings":"","sources":["move.js"],"sourcesContent":["const transformFactor = 0.4;\nconst shadowFactor = 2.0;\n\n// Functions\nconst scale = (n, min, max) => n * (max - min) + min;\nconst calculateAngle = (x, y, width, height) => Math.atan2(x - (width / 2), -(y - (height / 2))) * (180 / Math.PI);\n\n// TODO: Use requestAnimationFrame?\n// TODO: Make interface for matrix transformation\n// TODO: Make interface for the component with options\n//       for easy customization.\n\nwindow.addEventListener('dom-change', function(){\n    const $square = $('.square');\n\n    let squareW = $square.width();\n    let squareH = $square.height();\n\n    $(document).on('mousemove', function (e) {\n        const x = e.pageX - $square.offset().left;\n        const y = e.pageY - $square.offset().top;\n\n        const scaledX = scale(x / squareW, -1, 1);\n        const scaledY = scale(y / squareH, -1, 1);\n\n        const maxX = Math.atan2(15, squareH * .5 * 180 / Math.PI);\n        const maxY = Math.atan2(15, squareW * .5 * 180 / Math.PI);\n        const opacity = Math.max(Math.abs(scaledX / maxX), Math.abs(scaledY / maxY));\n\n        const angle = calculateAngle(x, y, squareW, squareH);\n\n        // FEATURE: Use radial gradient for better shadow.\n\n        $square.css({\n            transform: `\n            matrix3d(\n                1, 0, ${-scaledX * transformFactor}, 0,\n                0, 1, ${-scaledY * transformFactor}, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1\n            )`\n        });\n    });\n});\n\n//$square.on('mouseleave', function (e) {\n//    $(this).css({\n//        transform: `matrix3d(\n//        1, 0, 0, 0,\n//        0, 1, 0, 0,\n//        0, 0, 1, 0,\n//        0, 0, 0, 1\n//    )`,\n//    backgroundImage: `linear-gradient(0deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0))`,\n//    boxShadow: `0px 0px 0px rgba(0, 0, 0, 0)`\n//});\n//});"],"file":"move.js","sourceRoot":"/source/"}