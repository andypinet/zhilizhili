{"version":3,"names":[],"mappings":"","sources":["about/my_class/line.js"],"sourcesContent":["export default function(superClass) {\n\t\textend(line, superClass);\n\n\t\tfunction line() {\n\t\t\tthis._resetCombo = bind(this._resetCombo, this);\n\t\t\tthis._addLine = bind(this._addLine, this);\n\t\t\tthis.addPoint = bind(this.addPoint, this);\n\t\t\tthis.getCombo = bind(this.getCombo, this);\n\t\t\tthis.reset = bind(this.reset, this);\n\t\t\tthis.dispose = bind(this.dispose, this);\n\t\t\tthis._updateLine = bind(this._updateLine, this);\n\t\t\tthis._updatePoint = bind(this._updatePoint, this);\n\t\t\tthis.update = bind(this.update, this);\n\t\t\tthis._getUseLine2 = bind(this._getUseLine2, this);\n\t\t\tthis._getUseLine = bind(this._getUseLine, this);\n\t\t\tthis._makeLine2 = bind(this._makeLine2, this);\n\t\t\tthis._makeLine = bind(this._makeLine, this);\n\t\t\tthis.start = bind(this.start, this);\n\t\t\tline.__super__.constructor.call(this);\n\t\t\tthis._points = [];\n\t\t\tthis._comboPt = [];\n\t\t\tthis._preLines = [];\n\t\t\tthis._preLines2 = [];\n\t\t\tthis._lines = [];\n\t\t\tthis._combo = 0;\n\t\t\tthis.onCompleteMaxCombo;\n\t\t\tthis._cnt = 0;\n\t\t}\n\n\t\tline.prototype.start = function() {\n\t\t\tline.__super__.start.call(this);\n\t\t\tthis._resetCombo();\n\t\t\tthis._makeLine();\n\t\t\treturn this._makeLine2();\n\t\t};\n\n\t\tline.prototype._makeLine = function() {\n\t\t\tvar i, line, num, results;\n\t\t\ti = 0;\n\t\t\tnum = this._conf.PRE_SET_LINE_NUM;\n\t\t\tresults = [];\n\t\t\twhile (i < num) {\n\t\t\t\tline = new root.MY_CLASS.prtclLine();\n\t\t\t\tline.start();\n\t\t\t\tthis._container.add(line.container());\n\t\t\t\tthis._preLines.push(line);\n\t\t\t\tresults.push(i++);\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tline.prototype._makeLine2 = function() {\n\t\t\tvar geo, i, line, mat, num, results;\n\t\t\ti = 0;\n\t\t\tnum = this._conf.PRE_SET_LINE_NUM;\n\t\t\tresults = [];\n\t\t\twhile (i < num) {\n\t\t\t\tgeo = new THREE.Geometry();\n\t\t\t\tmat = new THREE.LineBasicMaterial({\n\t\t\t\t\tcolor: 0xFFFFFF,\n\t\t\t\t\tvertexColors: true,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tblending: THREE.AdditiveBlending,\n\t\t\t\t\tdepthTest: false,\n\t\t\t\t\tlinewidth: this._isSmt ? this._conf.LINE_WEIGHT_SMT : this._conf.LINE_WEIGHT_PC\n\t\t\t\t});\n\t\t\t\tline = new THREE.Line(geo, mat);\n\t\t\t\tline.visible = false;\n\t\t\t\tthis._container.add(line);\n\t\t\t\tthis._preLines2.push(line);\n\t\t\t\tresults.push(i++);\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tline.prototype._getUseLine = function() {\n\t\t\tvar i, j, len1, ref, val;\n\t\t\tref = this._preLines;\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tif (!val.container().visible) {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tline.prototype._getUseLine2 = function() {\n\t\t\tvar i, j, len1, ref, val;\n\t\t\tref = this._preLines2;\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tif (!val.visible) {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tline.prototype.update = function() {\n\t\t\tline.__super__.update.call(this);\n\t\t\tthis._updatePoint();\n\t\t\treturn this._updateLine();\n\t\t};\n\n\t\tline.prototype._updatePoint = function() {\n\t\t\tvar i, j, len1, ref, results, val;\n\t\t\tref = this._points;\n\t\t\tresults = [];\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tif (val != null) {\n\t\t\t\t\tval[2]--;\n\t\t\t\t\tif (val[2] <= 0) {\n\t\t\t\t\t\tresults.push(this._points[i] = null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(void 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresults.push(void 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tline.prototype._updateLine = function() {\n\t\t\tvar i, j, len1, m, ref, results, val;\n\t\t\tref = this._lines;\n\t\t\tresults = [];\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tif (val != null) {\n\t\t\t\t\tval.geometry.colorsNeedUpdate = true;\n\t\t\t\t\tval.geometry.verticesNeedUpdate = true;\n\t\t\t\t\tval.fadeOutDelay--;\n\t\t\t\t\tif (val.fadeOutDelay < 0) {\n\t\t\t\t\t\tif (this._isSmt) {\n\t\t\t\t\t\t\tval.visible = false;\n\t\t\t\t\t\t\tresults.push(this._lines[i] = null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm = val.material;\n\t\t\t\t\t\t\tm.opacity += (0 - m.opacity) * 0.1;\n\t\t\t\t\t\t\tif (Math.abs(0 - m.opacity) < 0.05) {\n\t\t\t\t\t\t\t\tval.visible = false;\n\t\t\t\t\t\t\t\tresults.push(this._lines[i] = null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresults.push(void 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(void 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresults.push(void 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tline.prototype.dispose = function() {\n\t\t\treturn line.__super__.dispose.call(this);\n\t\t};\n\n\t\tline.prototype.reset = function() {\n\t\t\tthis._lines = [];\n\t\t\treturn this._points = [];\n\t\t};\n\n\t\tline.prototype.getCombo = function() {\n\t\t\treturn this._combo;\n\t\t};\n\n\t\tline.prototype.addPoint = function(vec3, rank) {\n\t\t\tthis._points = this._u.sliceNull(this._points);\n\t\t\tthis._points.push([vec3, this._conf.ITEM_COLOR[rank], this._parameter.get(\"lineLife\")]);\n\t\t\tif (this._points.length >= 2) {\n\t\t\t\tthis._addLine(this._points[this._points.length - 2], this._points[this._points.length - 1]);\n\t\t\t\tthis._cnt++;\n\t\t\t\tthis._combo++;\n\t\t\t\tthis._comboPt.push(vec3.clone());\n\t\t\t\tif (this._combo >= this._conf.MAX_COMBO) {\n\t\t\t\t\tif (this.onCompleteMaxCombo != null) {\n\t\t\t\t\t\tthis.onCompleteMaxCombo(this._comboPt);\n\t\t\t\t\t}\n\t\t\t\t\tthis._resetCombo();\n\t\t\t\t\treturn this._comboPt.push(vec3.clone());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._resetCombo();\n\t\t\t\treturn this._comboPt.push(vec3.clone());\n\t\t\t}\n\t\t};\n\n\t\tline.prototype._addLine = function(pA, pB) {\n\t\t\tvar geo, line, line2;\n\t\t\tline = this._getUseLine();\n\t\t\tline.show(pB[0], pA[0], pB[1], pA[1]);\n\t\t\tline2 = this._getUseLine2();\n\t\t\tif (line2 == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgeo = line2.geometry;\n\t\t\tgeo.vertices[0] = pA[0];\n\t\t\tgeo.vertices[1] = pB[0];\n\t\t\tgeo.colors[0] = new THREE.Color(pA[1]);\n\t\t\tgeo.colors[1] = new THREE.Color(pB[1]);\n\t\t\tgeo.computeBoundingSphere();\n\t\t\tline2.material.opacity = 0.5;\n\t\t\tline2.fadeOutDelay = this._conf.LINE_HIDE_INTERVAL[this._device];\n\t\t\tline2.visible = true;\n\t\t\tthis._lines.push(line2);\n\t\t\treturn this._lines = this._u.sliceNull(this._lines);\n\t\t};\n\n\t\tline.prototype._resetCombo = function() {\n\t\t\tthis._combo = 1;\n\t\t\treturn this._comboPt = [];\n\t\t};\n\n\t\treturn line;\n\n\t}"],"file":"about/my_class/line.js","sourceRoot":"/source/"}