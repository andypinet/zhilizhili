{"version":3,"names":[],"mappings":"","sources":["about/my_class/drawing_line.js"],"sourcesContent":["export default function(superClass) {\n\t\textend(drawingLine, superClass);\n\n\t\tfunction drawingLine(color, radius) {\n\t\t\tthis.show = bind(this.show, this);\n\t\t\tthis._makeLine = bind(this._makeLine, this);\n\t\t\tthis.dispose = bind(this.dispose, this);\n\t\t\tthis._updateLine = bind(this._updateLine, this);\n\t\t\tthis.update = bind(this.update, this);\n\t\t\tthis.start = bind(this.start, this);\n\t\t\tdrawingLine.__super__.constructor.call(this, {\n\t\t\t\taddScene: false\n\t\t\t});\n\t\t\tthis._color = color;\n\t\t\tthis._radius = radius;\n\t\t\tthis._line;\n\t\t\tthis._anm = {};\n\t\t\tthis._v = [];\n\t\t\tthis._vNum = 120;\n\t\t\tthis._rotSpeed = {};\n\t\t}\n\n\t\tdrawingLine.prototype.start = function() {\n\t\t\tdrawingLine.__super__.start.call(this);\n\t\t\tthis._anm.show = new root._LIBS.animation();\n\t\t\tthis._anm.hide = new root._LIBS.animation();\n\t\t\treturn this._makeLine();\n\t\t};\n\n\t\tdrawingLine.prototype.update = function() {\n\t\t\tvar s;\n\t\t\tdrawingLine.__super__.update.call(this);\n\t\t\tif (this._container.visible) {\n\t\t\t\tthis._updateLine();\n\t\t\t\ts = this._anm.hide.get(\"scale\");\n\t\t\t\tthis._container.scale.set(s, s, s);\n\t\t\t\tif (this._anm.hide.isCompleted()) {\n\t\t\t\t\tthis._container.visible = false;\n\t\t\t\t}\n\t\t\t\tthis._container.rotation.x += this._rotSpeed.x;\n\t\t\t\tthis._container.rotation.y += this._rotSpeed.y;\n\t\t\t\treturn this._container.rotation.z += this._rotSpeed.z;\n\t\t\t}\n\t\t};\n\n\t\tdrawingLine.prototype._updateLine = function() {\n\t\t\tvar geometry, i, j, key, len1, ref, val;\n\t\t\tif (!this._anm.show.isCompleted()) {\n\t\t\t\tkey = ~~(this._anm.show.get(\"key\"));\n\t\t\t\tif (this._v.length - key < 6) {\n\t\t\t\t\tkey = this._v.length - 1;\n\t\t\t\t}\n\t\t\t\tgeometry = this._line.geometry;\n\t\t\t\tref = this._v;\n\t\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\t\tval = ref[i];\n\t\t\t\t\tgeometry.vertices[i].x = this._v[Math.min(i, key)].x;\n\t\t\t\t\tgeometry.vertices[i].y = this._v[Math.min(i, key)].y;\n\t\t\t\t}\n\t\t\t\tgeometry.computeBoundingSphere();\n\t\t\t\treturn geometry.verticesNeedUpdate = true;\n\t\t\t}\n\t\t};\n\n\t\tdrawingLine.prototype.dispose = function() {\n\t\t\treturn drawingLine.__super__.dispose.call(this);\n\t\t};\n\n\t\tdrawingLine.prototype._makeLine = function() {\n\t\t\tvar ang, geometry, i, j, len1, lineWidth, material, ref, s, val;\n\t\t\ti = 0;\n\t\t\ts = this._u.range(180);\n\t\t\twhile (i < this._vNum) {\n\t\t\t\tang = s + i * (360 / this._vNum);\n\t\t\t\tthis._v.push(new THREE.Vector3(Math.sin(this._u.radian(ang)) * this._radius, Math.cos(this._u.radian(ang)) * this._radius, 0));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tthis._v.push(this._v[0].clone());\n\t\t\tgeometry = new THREE.Geometry();\n\t\t\tgeometry.dynamic = true;\n\t\t\tref = this._v;\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tgeometry.vertices.push(val.clone());\n\t\t\t}\n\t\t\tlineWidth = [1, 0.5][this._device];\n\t\t\tmaterial = new THREE.LineBasicMaterial({\n\t\t\t\tcolor: this._color,\n\t\t\t\tvertexColors: false,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: [1, 1][this._device],\n\t\t\t\tlinewidth: lineWidth,\n\t\t\t\tblending: THREE.AdditiveBlending\n\t\t\t});\n\t\t\tthis._line = new THREE.Line(geometry, material);\n\t\t\treturn this._container.add(this._line);\n\t\t};\n\n\t\tdrawingLine.prototype.show = function(f, d, f2, d2) {\n\t\t\tvar i, j, len1, ref, val;\n\t\t\tthis._anm.show.set({\n\t\t\t\tkey: {\n\t\t\t\t\tfrom: 0,\n\t\t\t\t\tto: this._v.length - 1\n\t\t\t\t},\n\t\t\t\tframe: f,\n\t\t\t\tdelay: d || 0,\n\t\t\t\tease: \"easeInOutExpo\"\n\t\t\t});\n\t\t\tthis._anm.show.start();\n\t\t\tref = this._line.geometry.vertices;\n\t\t\tfor (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n\t\t\t\tval = ref[i];\n\t\t\t\tval = this._v[0].clone();\n\t\t\t}\n\t\t\tthis._rotSpeed.x = this._u.range(10) / 1000;\n\t\t\tthis._rotSpeed.y = this._u.range(10) / 1000;\n\t\t\tthis._rotSpeed.z = this._u.range(10) / 1000;\n\t\t\tthis._container.rotation.set(0, 0, 0);\n\t\t\tthis._anm.hide.set({\n\t\t\t\tscale: {\n\t\t\t\t\tfrom: [4, 2][this._device],\n\t\t\t\t\tto: 0.001\n\t\t\t\t},\n\t\t\t\tframe: f2,\n\t\t\t\tdelay: d2,\n\t\t\t\tease: \"easeInOutExpo\"\n\t\t\t});\n\t\t\tthis._anm.hide.start();\n\t\t\tdrawingLine.__super__.show.call(this);\n\t\t\treturn this.update();\n\t\t};\n\n\t\treturn drawingLine;\n\n\t}"],"file":"about/my_class/drawing_line.js","sourceRoot":"/source/"}