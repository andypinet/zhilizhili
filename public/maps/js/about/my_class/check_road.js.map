{"version":3,"names":[],"mappings":"","sources":["about/my_class/check_road.js"],"sourcesContent":["export default function() {\n\t\tfunction checkRoad() {\n\t\t\tthis._distStr = bind(this._distStr, this);\n\t\t\tthis.depthFromBBox = bind(this.depthFromBBox, this);\n\t\t\tthis._makeRoad = bind(this._makeRoad, this);\n\t\t\tthis._setTestPosition = bind(this._setTestPosition, this);\n\t\t\tthis._update = bind(this._update, this);\n\t\t\tthis._resize = bind(this._resize, this);\n\t\t\tthis.start = bind(this.start, this);\n\t\t\tthis._scene;\n\t\t\tthis._camera;\n\t\t\tthis._ambLight;\n\t\t\tthis._renderer;\n\t\t\tthis._hAxis;\n\t\t\tthis._trackBall;\n\t\t\tthis._container;\n\t\t\tthis._binormal = new THREE.Vector3();\n\t\t\tthis._normal = new THREE.Vector3();\n\t\t\tthis._material;\n\t\t\tthis._mesh;\n\t\t\tthis._debugger;\n\t\t\tthis._pNum = 10;\n\t\t\tthis._at = 0;\n\t\t\tthis._interval = -300;\n\t\t\tthis._u = root.MY.myfw.util;\n\t\t\tthis._conf = root.MY.app.conf;\n\t\t}\n\n\t\tcheckRoad.prototype.start = function() {\n\t\t\tthis._scene = new THREE.Scene();\n\t\t\tthis._camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 50000);\n\t\t\tthis._ambLight = new THREE.AmbientLight(0xffffff);\n\t\t\tthis._scene.add(this._ambLight);\n\t\t\tthis._ambLight.position.set(0, 0, 0);\n\t\t\tthis._renderer = new THREE.WebGLRenderer({\n\t\t\t\tantialias: false\n\t\t\t});\n\t\t\tthis._renderer.setClearColor(0xaaaaaa);\n\t\t\tthis._renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\tdocument.body.appendChild(this._renderer.domElement);\n\t\t\tthis._container = new THREE.Object3D();\n\t\t\tthis._scene.add(this._container);\n\t\t\tthis._hAxis = new THREE.AxisHelper(5);\n\t\t\tthis._container.add(this._hAxis);\n\t\t\tthis._material = new THREE.MeshBasicMaterial({\n\t\t\t\tmap: THREE.ImageUtils.loadTexture(this._conf.PATH_IMG.TEX + \"niji.jpg\")\n\t\t\t});\n\t\t\tthis._setTestPosition();\n\t\t\troot.MY.myfw.addResize(this._resize);\n\t\t\treturn root.MY.myfw.addUpdate(this._update);\n\t\t};\n\n\t\tcheckRoad.prototype._resize = function() {\n\t\t\tvar h, w;\n\t\t\tw = root.MY.myfw.stageWidth();\n\t\t\th = root.MY.myfw.stageHeight();\n\t\t\tthis._camera.aspect = w / h;\n\t\t\tthis._camera.updateProjectionMatrix();\n\t\t\treturn this._renderer.setSize(w, h);\n\t\t};\n\n\t\tcheckRoad.prototype._update = function() {\n\t\t\tvar dir, eyeDist, geo, lookAt, now, pick, pickNext, pickt, pos, segments;\n\t\t\tif (this._mesh != null) {\n\t\t\t\tthis._at += 0.001;\n\t\t\t\tif (this._at >= 1) {\n\t\t\t\t\tthis._at = 0;\n\t\t\t\t}\n\t\t\t\tgeo = this._mesh.geometry;\n\t\t\t\tconsole.log(this._at);\n\t\t\t\tpos = geo.parameters.path.getPointAt(this._at);\n\t\t\t\tsegments = geo.tangents.length;\n\t\t\t\tpickt = this._at * segments;\n\t\t\t\tpick = Math.floor(pickt);\n\t\t\t\tpickNext = (pick + 1) % segments;\n\t\t\t\tif ((geo.binormals[pickNext] != null) && (geo.binormals[pick] != null)) {\n\t\t\t\t\tthis._binormal.subVectors(geo.binormals[pickNext], geo.binormals[pick]);\n\t\t\t\t\tthis._binormal.multiplyScalar(pickt - pick).add(geo.binormals[pick]);\n\t\t\t\t}\n\t\t\t\tdir = geo.parameters.path.getTangentAt(this._at);\n\t\t\t\tthis._normal.copy(this._binormal).cross(dir);\n\t\t\t\tpos.add(this._binormal.clone().multiplyScalar(15));\n\t\t\t\tthis._camera.position.copy(pos);\n\t\t\t\teyeDist = 30;\n\t\t\t\tnow = (this._at + eyeDist / geo.parameters.path.getLength()) % 1;\n\t\t\t\tlookAt = geo.parameters.path.getPointAt(now);\n\t\t\t\tlookAt.add(this._binormal.clone().multiplyScalar(15));\n\t\t\t\tthis._camera.matrix.lookAt(this._camera.position, lookAt, this._binormal);\n\t\t\t\tthis._camera.rotation.setFromRotationMatrix(this._camera.matrix, this._camera.rotation.order);\n\t\t\t}\n\t\t\treturn this._renderer.render(this._scene, this._camera);\n\t\t};\n\n\t\tcheckRoad.prototype._setTestPosition = function() {\n\t\t\tvar base, i, p, param;\n\t\t\tbase = [\n\t\t\t\t{\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: 0\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -850\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -1700\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 40,\n\t\t\t\t\tz: -2550\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: -20,\n\t\t\t\t\tz: -3400\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 20,\n\t\t\t\t\tz: -4250\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: -10,\n\t\t\t\t\tz: -5100\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 20,\n\t\t\t\t\tz: -5950\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -6800\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -7650\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -8500\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -9350\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -10200\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -11050\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -11900\n\t\t\t\t}, {\n\t\t\t\t\tx: -190,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -12750\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -13600\n\t\t\t\t}, {\n\t\t\t\t\tx: -20,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -14450\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -15300\n\t\t\t\t}, {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: -16150\n\t\t\t\t}\n\t\t\t];\n\t\t\tif (base != null) {\n\t\t\t\tthis._pNum = base.length;\n\t\t\t} else {\n\t\t\t\tthis._pNum = 20;\n\t\t\t\tthis._interval = -380;\n\t\t\t}\n\t\t\ti = 0;\n\t\t\tparam = [];\n\t\t\twhile (i < this._pNum) {\n\t\t\t\tif (base == null) {\n\t\t\t\t\tp = {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tz: this._interval * i\n\t\t\t\t\t};\n\t\t\t\t\tparam.push({\n\t\t\t\t\t\ttype: 0,\n\t\t\t\t\t\tname: String(i) + \"_z\",\n\t\t\t\t\t\tdef: p.z,\n\t\t\t\t\t\tmin: this._pNum * this._interval,\n\t\t\t\t\t\tmax: 0,\n\t\t\t\t\t\tint: true,\n\t\t\t\t\t\tuseStrg: false\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tp = base[i];\n\t\t\t\t\tparam.push({\n\t\t\t\t\t\ttype: 0,\n\t\t\t\t\t\tname: String(i) + \"_z\",\n\t\t\t\t\t\tdef: p.z,\n\t\t\t\t\t\tmin: base[base.length - 1].z,\n\t\t\t\t\t\tmax: 0,\n\t\t\t\t\t\tint: true,\n\t\t\t\t\t\tuseStrg: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tparam.push({\n\t\t\t\t\ttype: 0,\n\t\t\t\t\tname: String(i) + \"_x\",\n\t\t\t\t\tdef: p.x,\n\t\t\t\t\tmin: -50,\n\t\t\t\t\tmax: 50,\n\t\t\t\t\tint: true,\n\t\t\t\t\tuseStrg: false\n\t\t\t\t});\n\t\t\t\tparam.push({\n\t\t\t\t\ttype: 0,\n\t\t\t\t\tname: String(i) + \"_y\",\n\t\t\t\t\tdef: p.y,\n\t\t\t\t\tmin: -50,\n\t\t\t\t\tmax: 50,\n\t\t\t\t\tint: true,\n\t\t\t\t\tuseStrg: false\n\t\t\t\t});\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tthis._debugger = new root._LIBS.debugView($(\"#debug\"), param);\n\t\t\tthis._debugger.onChange = this._makeRoad;\n\t\t\tthis._debugger.setup();\n\t\t\tthis._makeRoad();\n\t\t\treturn $(window).keydown((function(_this) {\n\t\t\t\treturn function(e) {\n\t\t\t\t\tif (e.keyCode === 32) {\n\t\t\t\t\t\t_this._makeRoad();\n\t\t\t\t\t}\n\t\t\t\t\tif (e.keyCode === 13) {\n\t\t\t\t\t\treturn _this._distStr();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})(this));\n\t\t};\n\n\t\tcheckRoad.prototype._makeRoad = function() {\n\t\t\tvar geo, i, p, radSegments, radius, segments, spline;\n\t\t\tif (this._mesh != null) {\n\t\t\t\tthis._container.remove(this._mesh);\n\t\t\t\tthis._mesh.geometry.dispose();\n\t\t\t\tthis._mesh = null;\n\t\t\t}\n\t\t\tp = [];\n\t\t\ti = 0;\n\t\t\twhile (i < this._pNum) {\n\t\t\t\tp.push(new THREE.Vector3(this._debugger.get(String(i) + \"_x\"), this._debugger.get(String(i) + \"_y\"), this._debugger.get(String(i) + \"_z\")));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tsegments = 5000;\n\t\t\tradius = 10;\n\t\t\tradSegments = 2;\n\t\t\tspline = new THREE.SplineCurve3(p);\n\t\t\tgeo = new THREE.TubeGeometry(spline, segments, radius, radSegments, false);\n\t\t\tgeo.computeBoundingSphere();\n\t\t\tgeo.computeBoundingBox();\n\t\t\tthis._mesh = new THREE.Mesh(geo, this._material);\n\t\t\tthis._container.add(this._mesh);\n\t\t\tconsole.log(\"闀枫仌::\", this.depthFromBBox(geo.boundingBox));\n\t\t\treturn this._at = 0;\n\t\t};\n\n\t\tcheckRoad.prototype.depthFromBBox = function(b) {\n\t\t\treturn b.max.z - b.min.z;\n\t\t};\n\n\t\tcheckRoad.prototype._distStr = function() {\n\t\t\tvar i, str;\n\t\t\tstr = \"[\";\n\t\t\ti = 0;\n\t\t\twhile (i < this._pNum) {\n\t\t\t\tstr += \"{\";\n\t\t\t\tstr += \"x:\" + String(this._debugger.get(String(i) + \"_x\")) + \",\";\n\t\t\t\tstr += \"y:\" + String(this._debugger.get(String(i) + \"_y\")) + \",\";\n\t\t\t\tstr += \"z:\" + String(this._debugger.get(String(i) + \"_z\")) + \"}\";\n\t\t\t\tif (i !== this._pNum - 1) {\n\t\t\t\t\tstr += \",\";\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tstr += \"]\";\n\t\t\treturn console.log(str);\n\t\t};\n\n\t\treturn checkRoad;\n\n\t}"],"file":"about/my_class/check_road.js","sourceRoot":"/source/"}